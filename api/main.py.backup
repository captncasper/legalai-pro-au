"""FastAPI application for Australian Legal AI"""
from fastapi.responses import HTMLResponse
from fastapi import FastAPI, HTTPException, Depends
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel
from typing import List, Dict, Any
import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.search import LegalSearchEngine


# Initialize
app = FastAPI(
    title="Australian Legal AI API",
    description="The ONLY comprehensive Australian legal search API",
    version="1.0.0"
)

# Serve static files
import os
if os.path.exists("static"):
    app.mount("/static", StaticFiles(directory="static"), name="static")

@app.get("/portal")
async def serve_portal():
    if os.path.exists("static/index.html"):
        return FileResponse("static/index.html")
    return {"error": "Portal not found"}

# Mount static files for web portal
try:
except:
    pass  # Static dir might not exist yet

# Enable CORS for Codespaces
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

security = HTTPBearer()
search_engine = None


class SearchRequest(BaseModel):
    query: str
    num_results: int = 5


class SearchResult(BaseModel):
    document_excerpt: str
    relevance_score: float
    document_id: int


class SearchResponse(BaseModel):
    query: str
    results: List[SearchResult]
    usage_credits: float = 1.0


@app.on_event("startup")
async def startup_event():
    global search_engine
    try:
        search_engine = LegalSearchEngine()
        print("✅ Search engine initialized")
    except Exception as e:
        print(f"⚠️  Warning: {e}")
        print("Creating demo search engine...")
        search_engine = LegalSearchEngine()


def verify_api_key(credentials: HTTPAuthorizationCredentials = Depends(security)):
    # In production, validate against database
    if credentials.credentials != "demo_key":
        raise HTTPException(status_code=403, detail="Invalid API key")
    return credentials.credentials


@app.get("/")
def read_root():
    return {
        "service": "Australian Legal AI",
        "description": "Exclusive access to 220,000+ Australian legal documents",
        "endpoints": {
            "/search": "Search legal documents",
            "/docs": "API documentation"
        }
    }


@app.post("/search", response_model=SearchResponse)
async def search_legal_documents(
    request: SearchRequest
):
    """Search Australian legal documents"""
    results = search_engine.search(request.query, request.num_results)
    
    # Format response
    formatted_results = []
    for r in results:
        formatted_results.append(SearchResult(
            document_excerpt=r['document'][:500] + "...",
            relevance_score=r['relevance_score'],
            document_id=r['document_id']
        ))
    
    return SearchResponse(
        query=request.query,
        results=formatted_results
    )


@app.get("/health")
def health_check():
    return {"status": "healthy"}
